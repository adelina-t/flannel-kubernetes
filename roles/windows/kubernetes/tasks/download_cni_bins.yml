- name: Flannel | Download flannel meta plugin
  win_get_url:
     url: "{{ flannel_binaries.flannel_meta_plugin }}"
     dest: "{{ install_path }}/cni/{{ flannel_binaries.flannel_meta_plugin | basename }}"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Flannel | Download host-local ipam plugin
  win_get_url:
     url: "{{ flannel_binaries.host_local_ipam_plugin }}"
     dest: "{{ install_path }}/cni/{{ flannel_binaries.host_local_ipam_plugin | basename }}"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Win-Bridge | Download l2bridge cni binaries
  win_get_url:
     url: "{{ item }}"
     dest: "{{ install_path }}/cni/{{ item | basename }}"
  with_items:
    - "{{ flannel_binaries.winbridge }}"
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "cniwin"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Sdnbridge | Set sdnbridge_bins_present fact
  set_fact: 
    sdnbridge_bins_present: false
  when: CNIBINS == "sdnms"

- name: Sdnbridge | Check if l2bridge cni binaries exist on ansible machine
  local_action: stat path="{{ ansible_tmp_dir }}/{{ item | basename }}"
  register: sdnbridge_stat
  with_items:
    - "{{ flannel_binaries.sdnbridge }}"
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms"

- block:
  - name: Sdnbridge | Checking all binaries
    set_fact:
      sdnbridge_bins_present: true
    with_items:
      - "{{sdnbridge_stat.results}}"
    loop_control:
      label: "{{item.item}}"
    when: item.stat.exists
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms"

- name: Sdnbridge | Download l2bridge cni binaries
  win_get_url:
     url: "{{ item }}"
     dest: "{{ install_path }}/cni/{{ item | basename }}"
  with_items:
    - "{{ flannel_binaries.sdnbridge }}"
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms" and not sdnbridge_bins_present

- name: Sdnbridge | Copy l2bridge cni binaries from ansible machine
  win_copy:
    src: "{{ ansible_tmp_dir }}/{{ item | basename }}"
    dest: "{{ install_path }}/cni/{{ item | basename }}"
  with_items:
    - "{{ flannel_binaries.sdnbridge }}"
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms" and sdnbridge_bins_present

- name: Win-overlay | Download overaly cni binaries
  win_get_url:
     url: "{{ item }}"
     dest: "{{ install_path }}/cni/{{ item | basename }}"
     timeout: 60
  with_items:
    - "{{ flannel_binaries.winoverlay }}"
  when: FLANNEL_MODE == "overlay" and CNIBINS == "cniwin"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Sdnoverlay | Set sdnoverlay_bins_present fact
  set_fact: 
    sdnoverlay_bins_present: false
  when: CNIBINS == "sdnms"

- name: Sdnoverlay | Check if overlay cni binaries exist on ansible machine
  local_action: stat path="{{ ansible_tmp_dir }}/{{ item | basename }}"
  register: sdnoverlay_stat
  with_items:
    - "{{ flannel_binaries.sdnoverlay }}"
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms"

- block:
  - name: Sdnoverlay | Checking all binaries
    set_fact:
      sdnoverlay_bins_present: true
    with_items:
      - "{{sdnoverlay_stat.results}}"
    loop_control:
      label: "{{item.item}}"
    when: item.stat.exists 
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms"

- name: Sdnoverlay | Download overaly cni binaries
  win_get_url:
     url: "{{ item }}"
     dest: "{{ install_path }}/cni/{{ item | basename }}"
     timeout: 60
  with_items:
    - "{{ flannel_binaries.sdnoverlay }}"
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms" and not sdnoverlay_bins_present

- name: Sdnoverlay | Copy overlay cni binaries from ansible machine
  win_copy:
    src: "{{ ansible_tmp_dir }}/{{ item | basename }}"
    dest: "{{ install_path }}/cni/{{ item | basename }}"
  with_items:
    - "{{ flannel_binaries.sdnoverlay }}"
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms" and sdnoverlay_bins_present

- name: Flannel | Download l2bridge flannel net-conf
  win_get_url:
     url: "{{ flannel_net_conf.windows_l2bridge }}"
     dest: "{{ install_path }}/net-conf.json"
     timeout: 60 
  when: FLANNEL_MODE == "host-gw"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Flannel | Download overlay flannel net-conf
  win_get_url:
     url: "{{ flannel_net_conf.windows_overlay }}"
     dest: "{{ install_path }}/net-conf.json" 
  when: FLANNEL_MODE == "overlay"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Win-bridge | Download l2bridge flannel cni-conf
  win_get_url:
     url: "{{ flannel_cni_conf.winbridge }}"
     dest: "{{ install_path }}/cni/config/cni.conf" 
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "cniwin"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Win-overlay | Download overlay flannel cni-conf
  win_get_url:
     url: "{{ flannel_cni_conf.winoverlay }}"
     dest: "{{ install_path }}/cni/config/cni.conf" 
  when: FLANNEL_MODE == "overlay" and CNIBINS == "cniwin"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: sdnoverlay | Download overlay flannel cni-conf
  win_get_url:
     url: "{{ flannel_cni_conf.sdnbridge }}"
     dest: "{{ install_path }}/cni/config/cni.conf" 
  when: FLANNEL_MODE == "host-gw" and CNIBINS == "sdnms"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: sdnoverlay | Download overlay flannel cni-conf
  win_get_url:
     url: "{{ flannel_cni_conf.sdnoverlay }}"
     dest: "{{ install_path }}/cni/config/cni.conf" 
  when: FLANNEL_MODE == "overlay" and CNIBINS == "sdnms"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10
