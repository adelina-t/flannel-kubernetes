---
- name: Flannel | Enable bridged IPv4 traffic
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    state: present

- name: Flannel | Download flannel yaml
  get_url:
    url: "{{ flannel_download_links.kube_flannel_vxlan }}"
    dest: /root/kube-flannel.yml
    mode: 0644
  when: FLANNEL_MODE == "overlay"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Flannel | Download flannel yaml
  get_url:
    url: "{{ flannel_download_links.kube_flannel_l2bridge }}"
    dest: /root/kube-flannel.yml
    mode: 0644
  when: FLANNEL_MODE == "host-gw"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Flannel | Apply flannel yaml
  shell: |
    kubectl apply -f /root/kube-flannel.yml

- name: Flannel | Download node-selector-patch.yml
  get_url:
    url: "{{ flannel_download_links.node_selector_patch }}"
    dest: /root/node-selector-patch.yml
    mode: 0644
  register: result
  until: result is succeeded
  retries: 3
  delay: 10

- name: Flannel | Apply NodeSelector to kube-flannel-ds
  shell: |
    kubectl patch ds/kube-flannel-ds-amd64 --patch "$(cat /root/node-selector-patch.yml)" -n=kube-system

- name: Flannel | Set flannel device MTU
  shell: |
    echo "Waiting for vxlan device..."
    while true; do
        VXLAN_DEVS=$(ip -o link show type vxlan | awk '{print substr($2, 1, length($2)-1)}')
        if [ -n "${VXLAN_DEVS}" ]; then
            for dev in ${VXLAN_DEVS}; do
                /sbin/ifconfig "${dev}" mtu {{ flannel_vxlan.mtu }}
            done
            break
        fi
        sleep 5
    done
  args:
    executable: /bin/bash
  when: FLANNEL_MODE == "overlay"
  register: result
  until: result is succeeded
  retries: 3
  delay: 10
