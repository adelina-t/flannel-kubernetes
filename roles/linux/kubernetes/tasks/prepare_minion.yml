---
- name: Kubernetes Minion | Generate the client certificates for the current minion
  import_role:
    name: linux/common
    tasks_from: k8s_client_certs

- name: Kubernetes Minion | Enable bridged IPv4 traffic
  shell: |
    sudo sysctl net.bridge.bridge-nf-call-iptables=1 

- name: Kubernetes Minion | Creating kubeconfig
  blockinfile:
    path: /etc/kubernetes/kubeconfig.yaml
    create: yes
    block: |
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          certificate-authority: {{ kubernetes_certificates.directory }}/ca.pem
          server: https://{{ kubernetes_cluster_info.MASTER_IP }}
        name: local
      users:
      - name: kubelet
        user:
          client-certificate: {{ kubernetes_certificates.directory }}/node.pem
          client-key: {{ kubernetes_certificates.directory }}/node-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context

- name: Kubernetes Minion | Create service kubelet
  blockinfile:
    path: /etc/systemd/system/kubelet.service
    create: yes
    block: |
      [Unit]
      Description=Kubelet Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kubelet \
        --network-plugin=cni \
        --hostname-override={{ ansible_hostname }} \
        --cluster-dns={{ kubernetes_cluster_info.K8S_DNS_SERVICE_IP }} \
        --cluster-domain={{ kubernetes_cluster_info.K8S_DNS_DOMAIN }} \
        --cni-bin-dir=/opt/cni/bin \
        --cni-conf-dir=/etc/cni/net.d \
        --kubeconfig=/etc/kubernetes/kubeconfig.yaml \
        --tls-cert-file={{ kubernetes_certificates.directory }}/ca.pem \
        --tls-private-key-file={{ kubernetes_certificates.directory }}/ca-key.pem \
        --fail-swap-on=false
      Restart=on-failure
      RestartSec=10
      WorkingDirectory=/root/
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Master | Register kube-proxy
  blockinfile:
    path: /etc/systemd/system/kube-proxy.service
    create: yes
    block: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      [Service]
      ExecStart=/usr/bin/kube-proxy \
        --kubeconfig /etc/kubernetes/kubeconfig.yaml \
        --cluster-cidr {{ kubernetes_cluster_info.CLUSTER_SUBNET }}
      Restart=on-failure
      RestartSec=10
      [Install]
      WantedBy=multi-user.target

- name: Kubernetes Minion | Start kube-proxy
  service:
    name: "kube-proxy"
    enabled: yes
    state: restarted
    daemon_reload: yes
  changed_when: false

- name: Kubernetes Minion | Start kubelet
  service:
    name: "kubelet"
    enabled: yes
    state: restarted
    daemon_reload: yes
  changed_when: false

- name: Kubernetes Minion | Setup kubectl
  import_role:
    name: linux/common
    tasks_from: kubectl_client

- name: Kubernetes Minion | Ensure /etc/hosts is updated
  lineinfile:
    path: /etc/hosts
    regexp: ' {{ ansible_hostname | lower }}$'
    line: '{{ host_public_ip }} {{ ansible_hostname | lower }}'

- name: Kubernetes Minion | Create CNI binaries folder
  file:
    path: "/opt/cni/bin"
    state: directory
    mode: 0755

- name: Kubernetes Minion | Get cni archive
  get_url:
    url: "{{kubernetes_binaries_info.cni_linux_download_link}}"
    dest: "/opt/cni/bin/cni.tgz"
    force_basic_auth: yes
    timeout: 30
  retries: 3

- name: Kubernetes Minion | Unarchive tar.gz
  unarchive:
    src: "/opt/cni/bin/cni.tgz"
    dest: "/opt/cni/bin/"
    remote_src: yes
